{"about":{"slug":"about","filePath":"about.md","title":"about","links":[],"tags":["blog"],"content":"这是关于作者页面","date":"2025-08-16T07:21:08.000Z"},"blog-with-obsidian-quartz4":{"slug":"blog-with-obsidian-quartz4","filePath":"blog-with-obsidian-quartz4.md","title":"使用Obisidian和Quartz 4编写博客","links":[],"tags":["blog"],"content":"安装和配置Quartz 4\ngit clone github.com/Kuhbz/quartz.git\ncd quartz\nnpm i\nnpx quartz create\n\n\n                  \n                  Warning\n                  \n                \n\n\n我安装的是我修改后配置好后的版本，如果要安装官方的版本请把仓库地址替换为：github.com/jackyzha0/quartz.git\n\n\n\n需要配置的插件\n\npriority: 用于查询日期信息的数据源。优先级最高。可能值为&quot;frontmatter&quot;、&quot;git&quot;和&quot;filesystem&quot;。默认为[&quot;frontmatter&quot;, &quot;git&quot;, &quot;filesystem&quot;]。如果您依赖git日期，请在quartz.config.ts设置defaultDateType设置modified。\nHardLineBreaks: 此插件会自动将 Markdown 文本中的单行换行符转换为 HTML 输出中的硬换行符。由于此插件不符合实际 Markdown 的语义，因此默认不启用。但如果您想与Obisidian保持一致，可以启用它。\n\n编写文章\n元数据\nQuartz 还允许在笔记中用Frontmatter的方式的附加元数据。\n---\ntitle: Example Title\ndraft: false\ntags:\n  - example-tag\n---\n \nThe rest of your content lives here. You can use **Markdown** here :)\n\nQuartz 原生支持的一些常见前置字段：\n\ntitle：页面标题。如果没有提供，Quartz 将使用文件名称作为标题。\ndescription：用于链接预览的页面描述。通常会被用在 SEO 的 meta 标签中，以及在文章列表或搜索结果中作为摘要显示\npermalink：页面的自定义 URL，即使文件路径发生变化也将保持不变。\naliases：此笔记的其他名称。这是一个字符串列表。\ntags：为页面打上一或多个标签。\ndraft：是否发布页面。\ndate：表示笔记发布日期的字符串。使用YYYY-MM-DD格式。\ncomments：设置为false则表示在本页不显示评论区。\n\n预览\nnpx quartz build --serve --concurrency 8\n要获得完整的帮助选项，可以运行npx quartz build --help。\n其中大多数都有合理的默认值，但是如果您有自定义设置，则可以覆盖它们：\n\n-d或--directory：内容文件夹。这通常只是content\n-v或--verbose：打印额外的日志信息\n-o或--output：输出文件夹。这通常只是public\n--serve：运行本地热重载服务器来预览你的 Quartz\n--port：在哪个端口上运行本地预览服务器\n--concurrency：使用多少个线程来解析笔记\n\n提交更改\nnpx quartz sync\n部署到Github Pages\n为了方便访问，我把生成的静态文件单独部署到kuhbz.github.io中，并且Giscus也使用这个仓库的discussions。\n1. 创建仓库\n&lt;你的用户名&gt;.github.io 是一个特殊的仓库，GitHub 会自动将它的 main (或 master) 分支部署为你的用户主页。如果这个仓库还不存在，请先在你的 GitHub 上创建它。网址就是 https://&lt;你的用户名&gt;.github.io。举例：我的用户名为kuhbz，那么仓库名就是kuhbz.github.io，访问地址就是kuhbz.github.io\n2. 生成并配置部署密钥\n为了让你当前仓库的 Action 能够安全地推送到 kuhbz.github.io 仓库，最安全的方法是使用部署密钥（Deploy Keys）。\n\n生成 SSH 密钥对：\n在你的本地电脑上打开终端，运行以下命令来生成一个新的 SSH 密钥对。当提示输入文件名时，可以输入 deploy_key，并且不要设置密码（直接按回车）。\nssh-keygen -t ed25519 -N &quot;&quot; -f deploy_key\n这会生成两个文件：deploy_key (私钥) 和 deploy_key.pub (公钥)。\n添加公钥到 kuhbz.github.io 仓库：\n\n打开 deploy_key.pub 文件，复制里面的全部内容。\n进入 kuhbz.github.io 仓库的 GitHub 页面。\n点击 “Settings” → “Deploy keys” → “Add deploy key”。\n给它一个标题，比如 “Quartz Deploy”。\n将公钥内容粘贴到 “Key” 字段中。\n非常重要：勾选 “Allow write access” 复选框。\n点击 “Add key”。\n\n\n添加私钥到你当前 Quartz 仓库：\n\n打开 deploy_key 文件（私钥），复制里面的全部内容。\n进入你存放 Quartz 源码的仓库的 GitHub 页面。\n点击 “Settings” → “Secrets and variables” → “Actions”。\n点击 “New repository secret”。\n将 Secret 的名字设置为 DEPLOY_KEY。\n将私钥内容粘贴到 “Secret” 字段中。\n点击 “Add secret”。\n\n\n\n3. 创建 deploy.yml 工作流\n现在，新建 .github/workflows/deploy.yml 文件。这个新版本的工作流使用了peaceiris/actions-gh-pages 这个流行的 Action 来处理跨仓库部署。\nname: Deploy Quartz site to kuhbz.github.io\n \non:\n  push:\n    branches:\n      - v4 # 确保这是你的源码主分支\n \njobs:\n  build-and-deploy:\n    runs-on: ubuntu-22.04\n    steps:\n      - name: Checkout source code\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0 # 获取所有git历史记录，用于日期等信息\n \n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: 22\n \n      - name: Install Dependencies\n        run: npm ci\n \n      - name: Build Quartz\n        run: npx quartz build\n \n      - name: Deploy to kuhbz.github.io\n        uses: peaceiris/actions-gh-pages@v4\n        with:\n          # 这是我们上一步创建的私钥Secret\n          deploy_key: ${{ secrets.DEPLOY_KEY }}\n          # 这是你的目标仓库\n          external_repository: kuhbz/kuhbz.github.io\n          # 这是要部署的文件夹\n          publish_dir: ./public\n          # 这是目标仓库的分支，对于用户主页通常是 main 或 master\n          publish_branch: main\n          # 确保 CNAME 文件被保留（如果你使用自定义域名）\n          keep_files: false\n          # 提交代码的用户名和邮箱\n          user_name: &#039;github-actions[bot]&#039;\n          user_email: &#039;github-actions[bot]@users.noreply.github.com&#039;\n          # 提交信息\n          commit_message: &quot;Deploy Quartz site from ${{ github.sha }}&quot;\n总结\n完成以上步骤后：\n运行 npx quartz sync 来提交并推送你的更改。推送会触 GitHub Actions 工作流。它会：\n\n构建你的 Quartz 网站，生成静态文件到 public 目录。\n使用你配置的部署密钥，安全地将 public 目录下的所有内容推送到 kuhbz.github.io 仓库的 main 分支。\n稍等片刻，网站就会成功部署在 kuhbz.github.io 上了。有需要的话也可以配置自定义域名。\n","date":"2025-08-16T09:43:18.000Z"},"friends":{"slug":"friends","filePath":"friends.md","title":"友情链接","links":[],"tags":["blog"],"content":"互换友链请在这个页面留言。","date":"2025-08-16T07:21:08.000Z"}}